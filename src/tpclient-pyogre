#! /usr/bin/env python

import requirements

import os, time
import ogre.renderer.OGRE as ogre
import ogre.gui.CEGUI as cegui

from tp.client.threads import NetworkThread, Application

import Framework
import Scene

def traceback():
	import sys, traceback, string
	type, val, tb = sys.exc_info()
	sys.stderr.write(string.join(traceback.format_exception(type, val, tb), ''))
	sys.stderr.flush()

def _PointHack(x, y):
	return cegui.Vector2(x, y)
cegui.Point = _PointHack

class GUI(Framework.Application):
	def __init__(self, application):
		Framework.Application.__init__(self)
		
		self.application = application
		self.guiRenderer = 0
		self.guiSystem = 0

		self.tocall = []
		self.start = self.go

	def start(self):
		try:
			self.go()
			print "Go finished!"
		finally:
			self.application.Exit()

	def _createScene(self):
		# Initiaslise CEGUI Renderer
		self.guiRenderer = cegui.OgreCEGUIRenderer(self.renderWindow,
				   ogre.RENDER_QUEUE_OVERLAY, True, 0, self.sceneManager)
		self.guiSystem = cegui.System(self.guiRenderer)
		cegui.Logger.getSingleton().loggingLevel = cegui.Insane

		# Load Cegui Scheme
		cegui.SchemeManager.getSingleton().loadScheme("SleekSpace.scheme")
		self.guiSystem.setDefaultMouseCursor("SleekSpace", "MouseArrow")

		wmgr = cegui.WindowManager.getSingleton()
		root = wmgr.createWindow("DefaultWindow", "root")
		self.guiSystem.setGUISheet(root)

		self.login = Scene.LoginScene(self, self.sceneManager)
		self.starmap = Scene.StarmapScene(self, self.sceneManager)

		self.guiSystem.injectMousePosition(0, 0)
		self.changeScene(self.login)

	def _createCamera(self):
		self.camera = self.sceneManager.createCamera("PlayerCam")
		self.camera.nearClipDistance = 5
		self.camera.setFixedYawAxis(True, ogre.Vector3.UNIT_Y)

	def _createFrameListener(self):
		self.frameListener = Framework.CEGUIFrameListener(self, self.renderWindow, self.camera)
		self.root.addFrameListener(self.frameListener)
		self.frameListener.showDebugOverlay(True)

	def __del__(self):
		"Clear variables, this is needed to ensure the correct order of deletion"
		del self.camera
		del self.sceneManager
		del self.frameListener
		del self.guiSystem
		del self.guiRenderer
		del self.root
		del self.renderWindow		

	def frameStarted(self, evt):
		if not self.frameListener.keepRendering:
			print "destroying"
			self.frameListener.destroy()
			self.application.Exit()

		if len(self.tocall) <= 0:
			return
			
		method, args, kw = self.tocall.pop(0)
		method(*args, **kw)

	def Call(self, method, *args, **kw):
		"""\
		Call a method in this thread.
		"""
		self.tocall.append((method, args, kw))

	def ConfigLoad(self, config):
		return
	
	def Post(self, event):
		"""
		Post an Event the current window.
		"""
		func = 'on' + event.__class__.__name__[:-5]
		if hasattr(self.currentScene, func):
			try:
				getattr(self.currentScene, func)(event)
			except Exception, e:
				traceback()
		else:
			print "scene", self.currentScene, "does not handle", func, "events"
		
	def ConfigSave(self):
		return {}

	def Cleanup(self):
		self.frameListener.keepRendering = False
		self.frameListener.destroy()

	def changeScene(self, scene):
		"""\
		Function to change to a different scene.
		"""
		if hasattr(self, "currentScene"):
			self.currentScene.hide()
		self.currentScene = scene
		self.currentScene.show()

class Network(NetworkThread):
	## These are network events
	class NetworkFailureEvent(Exception):
		"""\
		Raised when the network connection fails for what ever reason.
		"""
		pass

	def ConnectTo(self, host, username, password, debug=False):
		"""\
		Connect to a given host using a certain username and password.
		"""
		def callback(*args, **kw):
			print args, kw
		NetworkThread.ConnectTo(self, host, username, password, debug, callback)
		self.CacheUpdate()
	
	def CacheUpdate(self):
		def callback(*args, **kw):
			print args, kw
		
		gui = self.application.gui
		gui.Call(gui.changeScene, gui.login)
		NetworkThread.CacheUpdate(self, callback)
		gui.Call(gui.changeScene, gui.starmap)
		self.application.Post(self.application.cache.CacheUpdateEvent(None))
		return

from tp.client.threads import MediaThread, FinderThread
Application.GUIClass = GUI
Application.NetworkClass = Network
Application.MediaClass = MediaThread
Application.FinderClass = FinderThread
Application.ConfigFile = "pyogre_preferences"

if __name__ == '__main__':
	try:
		app = Application()
		app.Run()
		app.Exit()
	finally:
		traceback()
